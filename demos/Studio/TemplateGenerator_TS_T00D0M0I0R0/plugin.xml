<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.2"?>
<!--
 Copyright (C) Elektrobit Automotive GmbH - All rights reserved.

 Module PlugIn Example with a Template-based Code Generator
  
 This is a template for defining a module that utilized the templated based code-generator
 and the schema based generic editor.
-->

<plugin>

    <!-- 
      This extension defines a new (Autosar Module).
    -->
    <extension point="dreisoft.tresos.launcher2.plugin.module"
	       id="TemplateGenerator_TS_T00D0M0I0R0ModExt"
	       name="Module PlugIn with a TemplateGenerator">
	           
        <module id="TemplateGenerator_TS_T00D0M0I0R0" 
                label="%ModuleLabel"
    	        mandatory="false"
                allowMultiple="false"
                description="%ModuleDesc"
                copyright="(c) 2006 Elektrobit Automotive GmbH"
                swVersionMajor="2"
                swVersionMinor="0"
                swVersionPatch="0"
                specVersionMajor="2"
                specVersionMinor="0"
                specVersionPatch="0"
                categoryType="%ModuleName"
                categoryLayer="Driver"
                categoryCategory="Com"
                categoryComponent="ECUC">
           <ecuType target="TEST" derivate="TEST"/>      
       </module>	  	           
   </extension>
   
   <!--
     This extension is used to register configuration specific information:
     
     - Schemas (including pre-configuration and recommended configuration)
     - Editors
   -->
   <extension point="dreisoft.tresos.launcher2.plugin.configuration"  
              id="TemplateGenerator_TS_T00D0M0I0R0ConfExt"
              name="TemplateGenerator Parameter Definition Extension">
    <configuration moduleId="TemplateGenerator_TS_T00D0M0I0R0">
    
           <!-- 
             Register the files from which schemas and pre- an
             recommended configuration is loaded. For Autosar Modules
             this is normally dreisoft.tresos.autosar2.project.AutosarSchemaManager
           -->   
           <schema>
               <manager
                     class="dreisoft.tresos.autosar2.resourcehandling.AutosarSchemaManager"
                     />
               <!--
                 Define the file(s) from which to load the schemas
               -->
               <resource value="config/TemplateGenerator_TS_T00D0M0I0R0.xdm" 
                         type="xdm"/>
           </schema>           
     
           <!--
             Define where the toplevel schema node of the module is. For Autosar
             modules class must be dreisoft.tresos.autosar2.project.AutosarConfigManager
           -->
           <data>
               <manager
                     class="dreisoft.tresos.autosar2.resourcehandling.AutosarConfigManager"
                     />      
               <schemaNode path="ASPath:/TS_T00D0M0I0R0/TemplateGenerator"/>
           </data>                    
           
           <!--
             Define the editor (schema based GCE) of the module and how it presents
             it in the GUI.
             
             class is in this case always dreisoft.tresos.launcher2.editor.GenericConfigEditor
           -->
           <editor id="TemplateGenerator_TS_T00D0M0I0R0Edit" 
                   label="%ModuleName"
                   tooltip="%ModuleDesc">
               <class
                     class="dreisoft.tresos.launcher2.editor.GenericConfigEditor"
                     >
                 <!--
                   Defines the toplevel node of the schema used to render the editor
                 -->
                 <parameter name="schema" value="ASPath:/TS_T00D0M0I0R0/TemplateGenerator"/>
                 <parameter name="title" value="%ModuleDesc"/>               
               </class>
           </editor>   
       </configuration>
   </extension>
   
   <!-- 
     This extension draws the connection between the module, the template files 
     and the template-based code generator.
   -->
   <extension point="dreisoft.tresos.launcher2.plugin.generator"
              id="TemplateGenerator_TS_T00D0M0I0R0GenExt"
	      name="Module PlugIn TemplateGenerator">
       <!-- 
  	     This element contains the actual data for registering the code generator.
	     moduleId: id of the module this generator is associated with
	     class: 	  in the case of the template-based code generator this value is
	                  always 
	                  "dreisoft.tresos.launcher2.generator.TemplateBasedCodeGenerator"
	   -->
       <generator
             class="dreisoft.tresos.launcher2.generator.TemplateBasedCodeGenerator"
             id="TemplateGenerator_TS_T00D0M0I0R0GenExt"
             moduleId="TemplateGenerator_TS_T00D0M0I0R0">
          <!--
            In the case of the template-based code generator, the class implementing
            the generator understands a special parameter called "templates". Its 
            value is interpreted as a path fragment relative to the eclipse plugin
            where this file is located. The template-based code generator takes this
            path as source for template files and searches the directory it points
            to recursively.
            The paramter tags understand a third attribute, "mode", which can control
            the mode(s) in which this parameter is active. If this attribute is
            ommitted, the default "*" is assumed and the parameter applies for all 
            modes. You can also use the value "*" explicitly as mode.
          -->
          <parameter name="templates" value="generate"/>
         
          <!--
            The parameters can be mode-dependent. With the two parameter-tags below, the
            parameter "UnixLf" is set to "true", if the template-based code generator is
            run in the mode "generate" and "false" if it is run in mode "verify" mode. 
            If there is another mode, the "UnixLf" parameter is left at it's hardcoded
            default value.
            The mode-attribute also understands a comma-separated list as mode values.
          -->
          <parameter name="UnixLf" mode="generate" value="true"/>
          <parameter name="UnixLf" mode="verify" value="false"/>
         
          <!--
            With the template-based code generator, new modes (other than "generate"
            and "verify" can be introduced. Together with mode-dependent parameters,
            this can be used to introduce special generation modes for a module and
            to pass different parameter sets to the tempplate-based code generator.
            The two parameters below e.g. define the two special modes "verify_SWC-T"
            and "generate_SWC-T". If parameters with the name "mode_type" are 
            present, the template-based code generator will return the value-
            attributes of these parameters as supported modes (in addition to the
            two standard modes "generate" and "verify"). So in this case, the 
            supported modes are "verify", "generate", "verify_SWC-T" and 
            "generate_SWC-T".
            In addtition to just registering the custom modes, the "mode_type" 
            parameter has another purpose: the template-engine on the backend does 
            only understand two operation modes: "generate" and "verify". Thus, 
            each custom mode must be either a "generate" or a "verify" mode. We call
            this the "mode-type". This mapping is also done by this special parameter:
            the "verify_SWC-T" mode is of mode-type "verify" and the "generate_SWC-T"
            mode is if mode-type "generate".
          -->
		  <parameter name="mode_type" mode="verify_SWC-T" value="verify"/>
          <parameter name="mode_type" mode="generate_SWC-T" value="generate"/>

          <!--
            The order of the parameters is important: in general, the last occurence
            of a parameter-name is taken for determining the value (with the current
            generation mode taken into account, of course).
            Further above, the parameter "templates" was already defined, implicitly
            using the wildcard mode "*". However, the follwing paramter overwrites
            the value of the parameter for the two modes "verify_SWC-T" and
            "generate_SWC-T".
          -->
          <parameter name="templates" 
                     mode="verify_SWC-T,generate_SWC-T" 
                     value="generate_swc"/>
         
         <!--
           The last occurence of a specific mode can dominate previous occurences of 
           the parameter. However, the wildcard mode "*" cannot dominate explicitly
           named modes: although the following parameter "UnixLf" comes after the 
           previous definitions, it does not override the values for "generate"
           and "verify". 
           The parameter below is the last and the less specific, so it does 
           actually work as "default" for all not yet named modes: since the "UnixLf" 
           parameter has not been explcitly set for the two modes "verify_SWC-T" and 
           "generate_SWC-T", the value is now set to "false".
         -->
          <parameter name="UnixLf" mode="*" value="false"/>
         
       </generator>
   </extension>

</plugin>
